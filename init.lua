-- Current plugin directory
local plugin_directory = manager.plugins['configgenerator'].directory

-- Load plugin metadata
local json = require('json')
local configgenerator = json.parse(io.open(plugin_directory .. '/plugin.json'):read('*a')).plugin

local settings = {}

-- Default settings
local settings_defaults = {
  comments = true,
  output = "cfg_generated",
  atstart = false,
  overwrite = true
}

local settings_path = plugin_directory .. "/settings.json"

-- Open settings file
local settings_file = io.open(settings_path, "r")

-- If settings file doesn't exist, use default settings
if settings_file == nil then
  settings = settings_defaults
else
  -- Parse settings file
  settings = json.parse(settings_file:read("*a"))

  -- Add any missing settings from defaults and fix any wrong types
  for k,v in pairs(settings_defaults) do
    if (settings[k] == nil or type(settings[k]) ~= type(v)) then
      settings[k] = v
    end
  end
end

function execute()
  -- If no rom is loaded, don't do anything
  if emu.romname() == "___empty" then
    return
  end

  local inputs = ""
  local ioport = manager.machine.ioport
  local input = manager.machine.input

  -- Iterate through all ports and their fields, generating input tags for .cfg output
  for port_name, port in pairs(ioport.ports) do
    for field_name, field in pairs(port.fields) do
      local token = ioport:input_type_to_token(field.type, field.player)

      -- Add to output only if it's a controller or misc type
      if (field.type_class == "controller" or field.type_class == 'misc' or field.type_class == 'dipswitch') then

        local comment = ''
        if settings.comments == true then
          comment = '            <!-- ' .. field.name .. ' -->\n'
        end

        -- Build the input tag
        inputs = inputs .. comment .. '            <port tag="' .. port_name .. '" type="' .. token .. '" mask="' .. field.mask .. '" defvalue="' .. field.defvalue

        -- If it's a dipswitch, add the current value
        if field.type_class == 'dipswitch' then
          inputs = inputs .. '" value="' .. field.user_value
        end

        inputs = inputs ..'">'

        -- Add the input sequence tokens
        local sequence = field:input_seq()
        if sequence.empty == false then
          inputs = inputs .. '\n                <newseq type="standard">\n'
          inputs = inputs .. '                    ' .. input:seq_to_tokens(sequence) .. '\n'
          inputs = inputs .. '                </newseq>\n            '
        end

        inputs = inputs .. '</port>\n'

        if settings.comments == true then
          inputs = inputs .. '\n'
        end
      end
    end
  end

  -- .cfg header and footer
  local header = '<?xml version="1.0"?>\n<!-- This file is autogenerated; comments and unknown tags will be stripped -->\n<mameconfig version="10">\n    <system name="' .. emu.romname() .. '">\n        <input>\n'
  local footer = '        </input>\n    </system>\n</mameconfig>\n'

  -- Get attributes of the output directory
  local path = settings.output
  local attr = lfs.attributes(path)

  -- Check if output directory already exists but is not a directory
  if (attr and attr.mode ~= "directory") then
    emu.print_verbose("configgenerator: output path exists but isn't directory " .. path)
    return
  end

  -- Path doesn't exist yet, create it
  if not attr then
    lfs.mkdir(path)

    -- Check that path was created
    if not lfs.attributes(path) then
      emu.print_verbose("configgenerator: unable to create path " .. path)
      return
    end
  end

  local output_file = path .. "/" .. emu.romname() .. ".cfg"

  -- Check if file already exists and overwrite is disabled
  if settings.overwrite == false and io.open(output_file, "r") then
    emu.print_verbose("configgenerator: file already exists and overwrite is disabled " .. output_file)
    return
  end

  -- Write output file
  local file = io.open(output_file, "w")
  file:write(header .. inputs .. footer)
  file:close()
end

function configgenerator.startplugin()

  -- Execute plugin when emulation starts
  emu.register_start(function()
    if settings.atstart == true then
      execute()
    end
  end)

  -- Execute plugin when emulation stops
  emu.register_stop(function()
    if settings.atstart == false then
      execute()
    end
  end)

end

return configgenerator
